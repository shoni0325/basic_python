ifelse(mpg$total >= 30, 'A',
ifelse(mpg$total >= 20 & mpg$total < 30, 'B', 'C')))
ifelse(mpg$total >= 30, 'A',
ifelse(mpg$total >= 20 & mpg$total < 30, 'B', 'C'))) -> mpg$test
mpg
ifelse(mpg$total >= 30, 'A',
ifelse(mpg$total >= 20 & mpg$total < 30, 'B', 'C')) -> mpg$test
mpg
# 교수님 풀이
total = (mpg$cty + mpg$hwy) / 2
qplot(mpg$test)
# 시각화화
qplot(mpg$test)    # 개수가 막대그래프로 표현된다
View(midwest)
# 컬럼의 이름을 변경
# rename(데이터프레임명, 새 컬럼의 이름 = 변경이 될 컬럼의 이름)
# popasian 컬럼을 asian, poptotal 컬럼을 total 변경
# ratio 파생변수 생성 -> 전체 인구수 대비 아시아의 인구수 (백분율)
# group 파생변수 생성 -> ratio 평균보다 ratio의 값이 크면 'large' 아니면 'small'
rename(midwest, asian = popasian)
rename(midwest, total = poptotal)
# 컬럼의 이름을 변경
# rename(데이터프레임명, 새 컬럼의 이름 = 변경이 될 컬럼의 이름)
# popasian 컬럼을 asian, poptotal 컬럼을 total 변경
# ratio 파생변수 생성 -> 전체 인구수 대비 아시아의 인구수 (백분율)
# group 파생변수 생성 -> ratio 평균보다 ratio의 값이 크면 'large' 아니면 'small'
rename(midwest, asian = popasian)
# 컬럼의 이름을 변경
# rename(데이터프레임명, 새 컬럼의 이름 = 변경이 될 컬럼의 이름)
# popasian 컬럼을 asian, poptotal 컬럼을 total 변경
# ratio 파생변수 생성 -> 전체 인구수 대비 아시아의 인구수 (백분율)
# group 파생변수 생성 -> ratio 평균보다 ratio의 값이 크면 'large' 아니면 'small'
rename(midwest, asian = popasian) -> midwest
rename(midwest, total = poptotal) -> midwest
midwest
midwest$asian / midwest$total * 100
(midwest$asian / midwest$total) * 100
(midwest$asian / midwest$total)
midwest$ratio = (midwest$asian / midwest$total) * 100
midwest
midwest$ratio = (midwest$asian / midwest$total) * 100
midwest
midwest
midwest %>% mutate(ratio = (midwest$asian / midwest$total) * 100 )
midwest
midwest %>% mutate(ratio = (midwest$asian / midwest$total) * 100 ) -> midwest
midwest
midwest %>% mutate(ratio = (asian / total) * 100 ) -> midwest
midwest
midwest %>% mutate(ratio = asian / total)* 100 ) -> midwest
midwest %>% mutate(ratio = asian / total * 100 ) -> midwest
midwest
View(midwest)
# group 파생변수 생성 -> ratio 평균보다 ratio의 값이 크면 'large' 아니면 'small'
mean(midwest$ratio)
# group 파생변수 생성 -> ratio 평균보다 ratio의 값이 크면 'large' 아니면 'small'
mean(midwest$ratio) -> mean_ratio
ifelse(midwest$ratio > mean_ratio, 'large', 'small') -> midwest$ratio
midwest
View(midwest)
# midwest 데이터
midwest = ggplot2::midwest
View(midwest)
# 컬럼의 이름을 변경
# rename(데이터프레임명, 새 컬럼의 이름 = 변경이 될 컬럼의 이름)
# popasian 컬럼을 asian, poptotal 컬럼을 total 변경
rename(midwest, asian = popasian) -> midwest
rename(midwest, total = poptotal) -> midwest
# ratio 파생변수 생성 -> 전체 인구수 대비 아시아의 인구수 (백분율)
midwest %>% mutate(ratio = asian / total * 100 ) -> midwest
# group 파생변수 생성 -> ratio 평균보다 ratio의 값이 크면 'large' 아니면 'small'
mean(midwest$ratio) -> mean_ratio
ifelse(midwest$ratio > mean_ratio, 'large', 'small') -> midwest$group
midwest
# midwest 데이터
midwest = ggplot2::midwest
# 교수님 풀이
rename(midwest, asian = popasian, total = poptotal) -> midwest
midwest %>% mutate(ratio = asian / total * 100) %>%
select(total, asian, ratio)
midwest %>% mutate(ratio = asian / total * 100) -> midwest
ifelse(midwest$ratio > mean(midwest$ratio), 'large', 'small') -> midwest$group
qplot(midwest$group)
table(midwest$group)
## sav 파일 로드
install.packages('foreign')
install.packages('readxl')
library(foreign)
library(readxl)
welfare = read.spss(file = "./shoni_python/csv/koweps_hpc10_2015_beta1.sav", to.data.frame = T)
View(welfare)
welfare %>%
select(gender, birth, marriage, religion, income, code_job, code_region) -> welfare_copy
welfare = rename(welfare,
gender = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7)
welfare %>%
select(gender, birth, marriage, religion, income, code_job, code_region) -> welfare_copy
View(welfare)
View(welfare_copy)
View(welfare_copy)
ifelse(welfare_copy$gender == 1, 'male', 'female')
ifelse(welfare_copy$gender == 1, 'male', 'female') -> welfare_copy$gender
table(welfare_copy$gender)
# 성별을 기준으로 월급이 평균이 어떻게 되는가?
# income = 0이면 수익이 존재하지 않는다. -> 결측치로 변경
# income이 9999면 극단치로 생각해서 결측치로 변경
ifelse(welfare_copy$income == 0 | welfare_copy$income == 9999,
NA,
welfare_copy$income) -> welfare_copy$income
# 결측치를 확인
table(is.na(welfare_copy$income))
# income의 결측치를 제외하고
# 성별로 그룹화
# income 평균을 출력한다.
welfare_copy %>% group_by(gender) %>% mean(income, na.rm = T)
# income의 결측치를 제외하고
# 성별로 그룹화
# income 평균을 출력한다.
welfare_copy %>% filter(is.na(income)) %>% group_by(gender) %>% summarise(income_mean = mean(income))
# income의 결측치를 제외하고
# 성별로 그룹화
# income 평균을 출력한다.
welfare_copy %>% filter(!is.na(income)) %>% group_by(gender) %>% summarise(income_mean = mean(income))
welfare_copy %>% group_by(gender) %>% summarise(income_mean = mean(income), na.rm = T)
# income의 결측치를 제외하고
# 성별로 그룹화
# income 평균을 출력한다.
welfare_copy %>% filter(!is.na(income)) %>% group_by(gender) %>% summarise(income_mean = mean(income))
# income의 결측치를 제외하고
# 성별로 그룹화
# income 평균을 출력한다.
welfare_copy %>% filter(!is.na(income)) %>%
group_by(gender) %>%
summarise(income_mean = mean(income)) -> gender_income
## 데이터의 시각화
gglpot(data = gender_income,
aes(x = gender, y = income_mean))
## 데이터의 시각화
ggplot(data = gender_income,
aes(x = gender, y = income_mean))
## 데이터의 시각화
ggplot(data = gender_income,
aes(x = gender, y = income_mean)) + geom_col()
2023 - 1996
## 나이별 월급의 차이가 존재하는가?
welfare_copy$age = 2023 - welfare_copy$birth
welfare_copy
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(age))
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(income))
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(income)) -> age_income
ggplot(data = age_income,
aes(x = age, y = age_income)) + geom_line()
ggplot(data = age_income,
aes(x = age, y = age_income))
ggplot(data = age_income,
aes(x = age, y = age_mean))
ggplot(data = age_income,
aes(x = age, y = age_mean)) + geom_line()
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(income)) -> age_income
ggplot(data = age_income,
aes(x = age, y = age_mean)) + geom_line()
## 나이별 월급의 차이가 존재하는가?
welfare_copy$age = 2023 - welfare_copy$birth
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(income)) -> age_income
ggplot(data = age_income,
aes(x = age, y = age_mean)) + geom_line()
age_income
arrange(age_income, age_income$age_mean)
arrange(age_income, -age_income$age_mean)
arrange(age_income, -age_income$age_mean) %>% head(5)
# 교수님 풀이
# 결측치 제거
# 파생변수 나이를 생성
# 나이로 그룹화
# income 평균
welfare_copy %>% filter(!is.na(income)) %>%
mutate(age = 2023 - birth) %>%
group_by(age) %>%
summarise(income_mean = mean(income))
welfare = read.spss(file = "./shoni_python/csv/koweps_hpc10_2015_beta1.sav", to.data.frame = T)
ifelse(welfare_copy$age < 30, 'young', ifelse(welfare_copy$age < 60, 'middle', 'old'))
ifelse(welfare_copy$age < 30, 'young', ifelse(welfare_copy$age < 60, 'middle', 'old')) -> welfare_copy$ageg
welfare_copy %>% filter(!is.na(income)) %>%
group_by(ageg) %>% summarise(ageg_income_mean = mean(income))
welfare_copy %>% filter(!is.na(income)) %>%
group_by(ageg) %>% summarise(ageg_income_mean = mean(income)) -> ageg_income
ageg_income
ggplot(data = ageg_income,
aes(x = ageg, y = ageg_income_mean))
ggplot(data = ageg_income,
aes(x = ageg, y = ageg_income_mean)) + geom_col()
View(welfare_copy)
# 교수님 풀이
welfare_copy %>% mutate(age = 2023 - birth) %>%
mutate(ageg = ifelse(age < 30, 'young',
ifesle(age < 60, 'middle', 'old'))) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income, na.rm = T))
# 교수님 풀이
welfare_copy %>%
mutate(age = 2023 - birth) %>%
mutate(ageg = ifelse(age < 30, 'young',
ifelse(age < 60, 'middle', 'old'))) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income, na.rm = T))
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean))) + geom_col() +
# 교수님 풀이
welfare_copy %>%
mutate(age = 2023 - birth) %>%
mutate(ageg = ifelse(age < 30, 'young',
ifelse(age < 60, 'middle', 'old'))) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income, na.rm = T)) -> ageg_income
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean))) + geom_col() +
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean))) + geom_col() +
# 교수님 풀이
welfare_copy %>%
mutate(age = 2023 - birth) %>%
mutate(ageg = ifelse(age < 30, 'young',
ifelse(age < 60, 'middle', 'old'))) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income, na.rm = T)) -> ageg_income
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean))) + geom_col() +
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean)) + geom_col() +
scale_x_discrete(limits = c('young', 'middle', 'old'))
# 연령대, 성별 월급 평균
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg, gender) %>%
summarise(income_mean = mean(income))
# 연령대, 성별 월급 평균
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg, gender) %>%
summarise(income_mean = mean(income)) -> ageg_gender_income
ggplot(data = ageg_gender_income,
aes(x = ageg, y = income_mean, fill = gender)) +
geom_col()
ggplot(data = ageg_gender_income,
aes(x = ageg, y = income_mean, fill = gender)) +
geom_col() + scale_x_discrete(limits = c('young', 'middle', 'old'))
ggplot(data = ageg_gender_income,
aes(x = ageg, y = income_mean, fill = gender)) +
geom_col(position = 'dodge') + scale_x_discrete(limits = c('young', 'middle', 'old'))
# 나이, 성별 월급 평균을 비교
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(age, gender) %>%
summarise(income_mean = mean(income)) -> age_gender_income
ggplot(data = age_gender_income,
aes(x = age, y = income_mean, fill = gender)) +
geom_col(position = 'dodge') + scale_x_discrete(limits = c('young', 'middle', 'old'))
ggplot(data = age_gender_income,
aes(x = age, y = income_mean, fill = gender)) +
geom_line(position = 'dodge') + scale_x_discrete(limits = c('young', 'middle', 'old'))
ggplot(data = age_gender_income,
aes(x = age, y = income_mean, fill = gender)) +
geom_line(position = 'dodge')
gglot(data = age_gender_income,
aes(x = age, y = income_mean)) + geom_line()
ggplot(data = age_gender_income,
aes(x = age, y = income_mean)) + geom_line()
ggplot(data = age_gender_income,
aes(x = age, y = income_mean, color = gender)) + geom_line()
## 직업별로 평균 월급이 어떻게 되는가?
welfare_copy$code_job
read_excel("./shoni_pyhon/csv/Koweps_codebook.xlsx")
read_excel("./shoni_pyhon/csv/Koweps_Codebook.xlsx")
read_excel("./shoni_python/csv/Koweps_Codebook.xlsx")
read_excel("./shoni_python/csv/Koweps_Codebook.xlsx", sheet = 2)
read_excel("./shoni_python/csv/Koweps_Codebook.xlsx", sheet = 2, col_names = T)
list_job = read_excel("./shoni_python/csv/Koweps_Codebook.xlsx", sheet = 2, col_names = T)
# 2개의 데이터프레임을 조인결합
left_join(welfare_copy, list_job, "code_job")
# 2개의 데이터프레임을 조인결합
left_join(welfare_copy, list_job, by = "code_job")
# 2개의 데이터프레임을 조인결합
left_join(welfare_copy, list_job, by = "code_job") -> welfare_copy
welfare_copy %>% filter(!is.na(job & income))
welfare_copy %>% filter(!is.na(job, income))
welfare_copy %>% filter(!is.na(c(job,income))
welfare_copy %>% filter(!is.na(job) & !is.na(income))
welfare_copy %>% filter(!is.na(job) & !is.na(income))
welfare_copy %>% filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income))
ggplot(data = job_income_mean,
aes(x = job, y = income_mean)) + geom_col()
welfare_copy %>% filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income)) -> job_income
ggplot(data = job_income,
aes(x = job, y = income_mean)) + geom_col()
# 상위 10개만 출력
arrange(desc(job_income))
# 상위 10개만 출력
arrange(desc(job_income)) -> job_income
welfare_copy %>% filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income)) %>%
arrange(income_mean) -> job_income
# 상위 10개만 출력
head(job_income, 10)
# 상위 10개만 출력
head(job_income, 10) -> job_income_head
ggplot(data = job_income_head,
aes(x = job, y = income_mean)) + geom_col()
# 하위 10개만 출력
tail(job_income, 10)
welfare_copy %>% filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income)) %>%
arrange(-income_mean) -> job_income
# 상위 10개만 출력
head(job_income, 10) -> job_income_head
ggplot(data = job_income_head,
aes(x = job, y = income_mean)) + geom_col()
# 하위 10개만 출력
tail(job_income, 10)
# 상위 10개만 출력
head(job_income, 10)
# 하위 10개만 출력
tail(job_income, 10)
# 하위 10개만 출력
tail(job_income, 10) -> job_income_tail
ggplot(data = job_income_tail,
aes(x = job, y = income_mean)) + geom_col()
# ggplot(data = job_income_head,
# aes(x = job, y = income_mean)) + geom_col()
ggplot(data = head(job_income, 10),
aes(x = job, y = income_mean)) + geom_col()
# ggplot(data = job_income_head,
# aes(x = job, y = income_mean)) + geom_col()
ggplot(data = head(job_income, 10),
aes(x = job, y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_head,
# aes(x = job, y = income_mean)) + geom_col()
ggplot(data = head(job_income, 10),
aes(x = reorder(job, income_mean), y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_tail,
#        aes(x = job, y = income_mean)) + geom_col()
ggplot(data = tail(job_income, 10),
aes(x = reorder(job, income_mean), y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_head,
#        aes(x = job, y = income_mean)) + geom_col()
ggplot(data = head(job_income, 10),
aes(x = reorder(job, income_mean), y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_tail,
#        aes(x = job, y = income_mean)) + geom_col()
ggplot(data = tail(job_income, 10),
aes(x = reorder(job, income_mean), y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_tail,
#        aes(x = job, y = income_mean)) + geom_col()
ggplot(data = tail(job_income, 10),
aes(x = reorder(job, -income_mean), y = income_mean)) + geom_col() + coord_flip()
welfare_copy %>%
filter(!is.na(job)) %>%
group_by(gender, job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10)
welfare_copy %>%
filter(!is.na(job) & gender == 'male') %>%
group_by(gender, job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> male_top10
male_top10
welfare_copy %>%
filter(!is.na(job) & gender == 'male') %>%
group_by(job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> male_top10
male_top10
welfare_copy %>%
filter(!is.na(job) & gender == 'female') %>%
group_by(job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> male_top10
welfare_copy %>%
filter(!is.na(job) & gender == 'male') %>%
group_by(job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> male_top10
male_top10
welfare_copy %>%
filter(!is.na(job) & gender == 'female') %>%
group_by(job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> female_top10
female_top10
ifelse(welfare_copy$marriage == 3, 'divorce',
ifelse(welfare_copy$marriage == 1, 'marriage', ''))
ifelse(welfare_copy$marriage == 3, 'divorce',
ifelse(welfare_copy$marriage == 1, 'marriage', '')) -> welfare_copy$group_marriage
ifelse(welfare_copy$marriage == 3, 'divorce',
ifelse(welfare_copy$marriage == 1, 'marriage', NA)) -> welfare_copy$group_marriage
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg) %>%
summarise(divorce_rate = count(group_marriage, 'divorce')  / sum(group_marriage))
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg) %>%
summarise(divorce_rate = n('divorce')  / sum(group_marriage))
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg)
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg) -> g_ageg
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg) %>%
summarise(divorce_rate = n())
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(group_marriage) %>%
summarise(divorce_rate = n())
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(divorce_rate = n())
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(divorce_rate = n()) -> df
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(count = n()) -> df
divorce_rate = count$divorce / sum(df)
divorce_rate = n(divorce) / sum(df)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(a = n()) -> df
divorce_rate =  table(a$divorce)/ table(a)
df
df$divorce
df$a
df$a[1]
df$a[1] / df$a[1] + df$a[2]
df$a[1] / (df$a[1] + df$a[2])
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(divorce_rate = n())
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage, ageg) %>%
summarise(divorce_rate = n()) %>%
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage, ageg) %>%
summarise(divorce_rate = n(group_marriage)) %>%
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage, ageg) %>%
summarise(divorce_rate = n(group_marriage))
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n())
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) %>%  -> df
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) -> df
df
df %>% sum(count[1], count[2])
df %>% count[1] + count[2])
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) %>%
mutate(total_count = sum(count))
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) %>%
mutate(total_count = sum(count)) %>%
mutateK(pct = count / total_count *100)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) %>%
mutate(total_count = sum(count)) %>%
mutate(pct = count / total_count *100)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(cnt = n()) %>%
mutate(total_count = sum(cnt)) %>%
mutate(pct = cnt / total_count *100)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage, ageg) %>%
summarise(cnt = n()) %>%
mutate(total_count = sum(cnt)) %>%
mutate(pct = cnt / total_count *100)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(cnt = n()) %>%
mutate(total_count = sum(cnt)) %>%
mutate(pct = cnt / total_count *100)
