welfare_copy %>% group_by(gender) %>% summarise(income_mean = mean(income), na.rm = T)
# income의 결측치를 제외하고
# 성별로 그룹화
# income 평균을 출력한다.
welfare_copy %>% filter(!is.na(income)) %>% group_by(gender) %>% summarise(income_mean = mean(income))
# income의 결측치를 제외하고
# 성별로 그룹화
# income 평균을 출력한다.
welfare_copy %>% filter(!is.na(income)) %>%
group_by(gender) %>%
summarise(income_mean = mean(income)) -> gender_income
## 데이터의 시각화
gglpot(data = gender_income,
aes(x = gender, y = income_mean))
## 데이터의 시각화
ggplot(data = gender_income,
aes(x = gender, y = income_mean))
## 데이터의 시각화
ggplot(data = gender_income,
aes(x = gender, y = income_mean)) + geom_col()
2023 - 1996
## 나이별 월급의 차이가 존재하는가?
welfare_copy$age = 2023 - welfare_copy$birth
welfare_copy
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(age))
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(income))
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(income)) -> age_income
ggplot(data = age_income,
aes(x = age, y = age_income)) + geom_line()
ggplot(data = age_income,
aes(x = age, y = age_income))
ggplot(data = age_income,
aes(x = age, y = age_mean))
ggplot(data = age_income,
aes(x = age, y = age_mean)) + geom_line()
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(income)) -> age_income
ggplot(data = age_income,
aes(x = age, y = age_mean)) + geom_line()
## 나이별 월급의 차이가 존재하는가?
welfare_copy$age = 2023 - welfare_copy$birth
welfare_copy %>% filter(!is.na(income)) %>%
group_by(age) %>%
summarise(age_mean = mean(income)) -> age_income
ggplot(data = age_income,
aes(x = age, y = age_mean)) + geom_line()
age_income
arrange(age_income, age_income$age_mean)
arrange(age_income, -age_income$age_mean)
arrange(age_income, -age_income$age_mean) %>% head(5)
# 교수님 풀이
# 결측치 제거
# 파생변수 나이를 생성
# 나이로 그룹화
# income 평균
welfare_copy %>% filter(!is.na(income)) %>%
mutate(age = 2023 - birth) %>%
group_by(age) %>%
summarise(income_mean = mean(income))
welfare = read.spss(file = "./shoni_python/csv/koweps_hpc10_2015_beta1.sav", to.data.frame = T)
ifelse(welfare_copy$age < 30, 'young', ifelse(welfare_copy$age < 60, 'middle', 'old'))
ifelse(welfare_copy$age < 30, 'young', ifelse(welfare_copy$age < 60, 'middle', 'old')) -> welfare_copy$ageg
welfare_copy %>% filter(!is.na(income)) %>%
group_by(ageg) %>% summarise(ageg_income_mean = mean(income))
welfare_copy %>% filter(!is.na(income)) %>%
group_by(ageg) %>% summarise(ageg_income_mean = mean(income)) -> ageg_income
ageg_income
ggplot(data = ageg_income,
aes(x = ageg, y = ageg_income_mean))
ggplot(data = ageg_income,
aes(x = ageg, y = ageg_income_mean)) + geom_col()
View(welfare_copy)
# 교수님 풀이
welfare_copy %>% mutate(age = 2023 - birth) %>%
mutate(ageg = ifelse(age < 30, 'young',
ifesle(age < 60, 'middle', 'old'))) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income, na.rm = T))
# 교수님 풀이
welfare_copy %>%
mutate(age = 2023 - birth) %>%
mutate(ageg = ifelse(age < 30, 'young',
ifelse(age < 60, 'middle', 'old'))) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income, na.rm = T))
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean))) + geom_col() +
# 교수님 풀이
welfare_copy %>%
mutate(age = 2023 - birth) %>%
mutate(ageg = ifelse(age < 30, 'young',
ifelse(age < 60, 'middle', 'old'))) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income, na.rm = T)) -> ageg_income
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean))) + geom_col() +
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean))) + geom_col() +
# 교수님 풀이
welfare_copy %>%
mutate(age = 2023 - birth) %>%
mutate(ageg = ifelse(age < 30, 'young',
ifelse(age < 60, 'middle', 'old'))) %>%
group_by(ageg) %>%
summarise(income_mean = mean(income, na.rm = T)) -> ageg_income
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean))) + geom_col() +
ggplot(data = ageg_income,
aes(x = ageg, y = income_mean)) + geom_col() +
scale_x_discrete(limits = c('young', 'middle', 'old'))
# 연령대, 성별 월급 평균
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg, gender) %>%
summarise(income_mean = mean(income))
# 연령대, 성별 월급 평균
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(ageg, gender) %>%
summarise(income_mean = mean(income)) -> ageg_gender_income
ggplot(data = ageg_gender_income,
aes(x = ageg, y = income_mean, fill = gender)) +
geom_col()
ggplot(data = ageg_gender_income,
aes(x = ageg, y = income_mean, fill = gender)) +
geom_col() + scale_x_discrete(limits = c('young', 'middle', 'old'))
ggplot(data = ageg_gender_income,
aes(x = ageg, y = income_mean, fill = gender)) +
geom_col(position = 'dodge') + scale_x_discrete(limits = c('young', 'middle', 'old'))
# 나이, 성별 월급 평균을 비교
welfare_copy %>%
filter(!is.na(income)) %>%
group_by(age, gender) %>%
summarise(income_mean = mean(income)) -> age_gender_income
ggplot(data = age_gender_income,
aes(x = age, y = income_mean, fill = gender)) +
geom_col(position = 'dodge') + scale_x_discrete(limits = c('young', 'middle', 'old'))
ggplot(data = age_gender_income,
aes(x = age, y = income_mean, fill = gender)) +
geom_line(position = 'dodge') + scale_x_discrete(limits = c('young', 'middle', 'old'))
ggplot(data = age_gender_income,
aes(x = age, y = income_mean, fill = gender)) +
geom_line(position = 'dodge')
gglot(data = age_gender_income,
aes(x = age, y = income_mean)) + geom_line()
ggplot(data = age_gender_income,
aes(x = age, y = income_mean)) + geom_line()
ggplot(data = age_gender_income,
aes(x = age, y = income_mean, color = gender)) + geom_line()
## 직업별로 평균 월급이 어떻게 되는가?
welfare_copy$code_job
read_excel("./shoni_pyhon/csv/Koweps_codebook.xlsx")
read_excel("./shoni_pyhon/csv/Koweps_Codebook.xlsx")
read_excel("./shoni_python/csv/Koweps_Codebook.xlsx")
read_excel("./shoni_python/csv/Koweps_Codebook.xlsx", sheet = 2)
read_excel("./shoni_python/csv/Koweps_Codebook.xlsx", sheet = 2, col_names = T)
list_job = read_excel("./shoni_python/csv/Koweps_Codebook.xlsx", sheet = 2, col_names = T)
# 2개의 데이터프레임을 조인결합
left_join(welfare_copy, list_job, "code_job")
# 2개의 데이터프레임을 조인결합
left_join(welfare_copy, list_job, by = "code_job")
# 2개의 데이터프레임을 조인결합
left_join(welfare_copy, list_job, by = "code_job") -> welfare_copy
welfare_copy %>% filter(!is.na(job & income))
welfare_copy %>% filter(!is.na(job, income))
welfare_copy %>% filter(!is.na(c(job,income))
welfare_copy %>% filter(!is.na(job) & !is.na(income))
welfare_copy %>% filter(!is.na(job) & !is.na(income))
welfare_copy %>% filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income))
ggplot(data = job_income_mean,
aes(x = job, y = income_mean)) + geom_col()
welfare_copy %>% filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income)) -> job_income
ggplot(data = job_income,
aes(x = job, y = income_mean)) + geom_col()
# 상위 10개만 출력
arrange(desc(job_income))
# 상위 10개만 출력
arrange(desc(job_income)) -> job_income
welfare_copy %>% filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income)) %>%
arrange(income_mean) -> job_income
# 상위 10개만 출력
head(job_income, 10)
# 상위 10개만 출력
head(job_income, 10) -> job_income_head
ggplot(data = job_income_head,
aes(x = job, y = income_mean)) + geom_col()
# 하위 10개만 출력
tail(job_income, 10)
welfare_copy %>% filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(income_mean = mean(income)) %>%
arrange(-income_mean) -> job_income
# 상위 10개만 출력
head(job_income, 10) -> job_income_head
ggplot(data = job_income_head,
aes(x = job, y = income_mean)) + geom_col()
# 하위 10개만 출력
tail(job_income, 10)
# 상위 10개만 출력
head(job_income, 10)
# 하위 10개만 출력
tail(job_income, 10)
# 하위 10개만 출력
tail(job_income, 10) -> job_income_tail
ggplot(data = job_income_tail,
aes(x = job, y = income_mean)) + geom_col()
# ggplot(data = job_income_head,
# aes(x = job, y = income_mean)) + geom_col()
ggplot(data = head(job_income, 10),
aes(x = job, y = income_mean)) + geom_col()
# ggplot(data = job_income_head,
# aes(x = job, y = income_mean)) + geom_col()
ggplot(data = head(job_income, 10),
aes(x = job, y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_head,
# aes(x = job, y = income_mean)) + geom_col()
ggplot(data = head(job_income, 10),
aes(x = reorder(job, income_mean), y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_tail,
#        aes(x = job, y = income_mean)) + geom_col()
ggplot(data = tail(job_income, 10),
aes(x = reorder(job, income_mean), y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_head,
#        aes(x = job, y = income_mean)) + geom_col()
ggplot(data = head(job_income, 10),
aes(x = reorder(job, income_mean), y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_tail,
#        aes(x = job, y = income_mean)) + geom_col()
ggplot(data = tail(job_income, 10),
aes(x = reorder(job, income_mean), y = income_mean)) + geom_col() + coord_flip()
# ggplot(data = job_income_tail,
#        aes(x = job, y = income_mean)) + geom_col()
ggplot(data = tail(job_income, 10),
aes(x = reorder(job, -income_mean), y = income_mean)) + geom_col() + coord_flip()
welfare_copy %>%
filter(!is.na(job)) %>%
group_by(gender, job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10)
welfare_copy %>%
filter(!is.na(job) & gender == 'male') %>%
group_by(gender, job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> male_top10
male_top10
welfare_copy %>%
filter(!is.na(job) & gender == 'male') %>%
group_by(job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> male_top10
male_top10
welfare_copy %>%
filter(!is.na(job) & gender == 'female') %>%
group_by(job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> male_top10
welfare_copy %>%
filter(!is.na(job) & gender == 'male') %>%
group_by(job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> male_top10
male_top10
welfare_copy %>%
filter(!is.na(job) & gender == 'female') %>%
group_by(job) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(10) -> female_top10
female_top10
ifelse(welfare_copy$marriage == 3, 'divorce',
ifelse(welfare_copy$marriage == 1, 'marriage', ''))
ifelse(welfare_copy$marriage == 3, 'divorce',
ifelse(welfare_copy$marriage == 1, 'marriage', '')) -> welfare_copy$group_marriage
ifelse(welfare_copy$marriage == 3, 'divorce',
ifelse(welfare_copy$marriage == 1, 'marriage', NA)) -> welfare_copy$group_marriage
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg) %>%
summarise(divorce_rate = count(group_marriage, 'divorce')  / sum(group_marriage))
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg) %>%
summarise(divorce_rate = n('divorce')  / sum(group_marriage))
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg)
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg) -> g_ageg
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(ageg) %>%
summarise(divorce_rate = n())
welfare_copy %>% filter(!is.na(NA)) %>%
group_by(group_marriage) %>%
summarise(divorce_rate = n())
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(divorce_rate = n())
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(divorce_rate = n()) -> df
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(count = n()) -> df
divorce_rate = count$divorce / sum(df)
divorce_rate = n(divorce) / sum(df)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(a = n()) -> df
divorce_rate =  table(a$divorce)/ table(a)
df
df$divorce
df$a
df$a[1]
df$a[1] / df$a[1] + df$a[2]
df$a[1] / (df$a[1] + df$a[2])
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage) %>%
summarise(divorce_rate = n())
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage, ageg) %>%
summarise(divorce_rate = n()) %>%
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage, ageg) %>%
summarise(divorce_rate = n(group_marriage)) %>%
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage, ageg) %>%
summarise(divorce_rate = n(group_marriage))
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n())
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) %>%  -> df
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) -> df
df
df %>% sum(count[1], count[2])
df %>% count[1] + count[2])
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) %>%
mutate(total_count = sum(count))
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) %>%
mutate(total_count = sum(count)) %>%
mutateK(pct = count / total_count *100)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(count = n()) %>%
mutate(total_count = sum(count)) %>%
mutate(pct = count / total_count *100)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(cnt = n()) %>%
mutate(total_count = sum(cnt)) %>%
mutate(pct = cnt / total_count *100)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(group_marriage, ageg) %>%
summarise(cnt = n()) %>%
mutate(total_count = sum(cnt)) %>%
mutate(pct = cnt / total_count *100)
welfare_copy %>% filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(cnt = n()) %>%
mutate(total_count = sum(cnt)) %>%
mutate(pct = cnt / total_count *100)
# 벡터 생성
vector1 <- c(1:10)
print(vector1)
print(vector2)
vector2 <- c(1:10, NA)
print(vector2)
# 합계
sum(vector1)
sum(vector2)
sum(vector2, na.rm = T)
# 평균
mean(vector1)
mean(vector2, na.rm = T)
# 중앙값
median(vector1)
median(vector2, na.rm = T)
# 표본 분산
var(vector1)
var(vector2, na.rm = T)
# 표본 표준편차
sd(vector1)
sd(vector2, na.rm = T)
# 최댓값
max(vector1)
max(vector2, na.rm = T)
# 최솟값
min(vector1)
min(vector2, na.rm = T)
# 최댓값과 최솟값
range(vector1)
range(vector2, na.rm = T)
# 요약값
summary(vector1)
summary(vactor2)
summary(vector2)
# 산점도
vector3 <- sample(100)
vector4 <- sample(100)
plot(vector3, vector4)
# 공분산
cov(vector3, vector4)
# 상관계수
cor(vector3, vector4)
vector6 <- vector5 + rnorm(100,0,10)
# 값이 크면 클 수록 두 데이터는 정비례
# vector2가 값이 증가할 때 vector3 역시 값이 증가
vector5 <- 1:100
vector6 <- vector5 + rnorm(100,0,10)
plot(vector5, vector6)
cov(vect5, vector6)
cov(vector5, vector6)
cor(vector5, vector6)
print vector6
print(vector6)
print(vector5)
# fBasics 설치
install.packages('fBasics')
library(fBasics)
# 왜도
vector7 <- rnorm(1000)
skewness(vector7)
hist(vector7, breaks = 30)
# 첨도 (첨도값이 3일 경우 정규분포에 근사, 때로는 kurtosis값에서 3을 빼서 0일때 정규분포에 근사하고도 표현)
# R의 kurtosis 합수는 첨도값에서 -3을 뺌
kurtosis(vector7)
# sample
sample(10)
sample(10, 5)
sample(10, 100)
sample(10, 100, replace = T)
# 균일분포
vector1 <- runif(1000)
vector1
vector2 <- runif(1000, 10, 100)
vector2
hist(vector2, breaks = 30)
# 정규분포
vector3 <- rnorm(1000)
vecetor3
vector3
vector4 <- rnorm(1000,50,10)
vector4
hist(vector4, breaks=30)
?hist
hist(vector3, breaks = 30)
# 데이터 프레임 탐색
math = sample(100, 1000, replace = T)
eng = sample(100, 1000, replace = T)
df1 <- data.frame(math, eng)
head(df1)
head(df1, 10)
tail(df1)
tail(df1, 10)
# 1개의 조건에 맞게 추출 subset(데이터프레임, 조건)
math100 <- subset(df1, df1$math==100)
math100
math10_under <- subset(df1, df1$math<10)
math10_under
# 2개 이상의 조건
one100 <- subset(df1, df1$math==100|df1$eng==100)
one100
math100_eng100 <- subset(df1, df1$math==100&df1$eng==100)
math100_eng100
# 데이터프레임에 함수 적용 apply
# (데이터프레임, 1 또는 2, 함수)
score_sum_by_row <- apply(df1, 1, sum)
score_sum_by_row
score_mean_by_column <- apply(df1, 2, mean)
score_mean_by_column
# 데이터 프레임에 함수 결과 적용
df1$avg_value <- apply(df1, 1, mean)
head(df1)
volume <- c(1, 1, 4, 1, 6, 2, 2, 2, 2, 4, 3, 3, 3, 3, 6)
volume <- c(1, 1.4, 1.6, 2, 2.2, 2.4, 3, 3, 3.3, 6)
mileage <- c(15, 13, 13, 12, 11, 10.5, 10, 9, 8)
car <- data.frame(volume, mileage)
volume <- c(1, 1.4, 1.6, 2, 2.2, 2.4, 3, 3, 3.3, 6)
mileage <- c(15, 13, 13, 12, 11, 10.5, 10, 9, 8)
car <- data.frame(volume, mileage)
volume <- c(1, 1.4, 1.6, 2, 2.2, 2.4, 3, 3, 3.3.6)
mileage <- c(15, 13, 13, 12, 11, 10.5, 10, 9, 8)
car <- data.frame(volume, mileage)
volume <- c(1, 1.4, 1.6, 2, 2.2, 2.4, 3, 3, 3.6)
mileage <- c(15, 13, 13, 12, 11, 10.5, 10, 9, 8)
car <- data.frame(volume, mileage)
reseult <- lm(data = car, mileage~volume)
summary(result)
result <- lm(data = car, mileage~volume)
summary(result)
